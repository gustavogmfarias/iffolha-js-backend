// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "windows", "debian-openssl-1.1.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    USER
    ADMIN
    EDITOR
    AUTHOR
}

model User {
    id               String             @id @default(uuid())
    name             String
    lastName         String
    password         String
    email            String             @unique
    createdAt        DateTime           @default(now())
    avatarUrl        String?
    role             Role               @default(USER)
    userToken        UserToken[]
    Log              Log[]
    Publisher        Report[]           @relation("Publisher")
    Editor           Report[]           @relation("Editor")
    AuthorsOnReports AuthorsOnReports[]

    @@map("users")
}

model UserToken {
    id           String   @id @default(uuid())
    token        String
    refreshToken String
    userId       String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt    DateTime @default(now())
    expiresDate  DateTime

    @@map("userTokens")
}

model Log {
    id              String        @id @default(uuid())
    logRepository   LogRepository
    description     String
    createdAt       DateTime      @default(now())
    user            User          @relation(fields: [editedByUserId], references: [id])
    previousContent String        @default("Sem conte√∫do Anterior")
    contentEdited   String
    editedByUserId  String
    modelEditedId   String

    @@map("logs")
}

enum LogRepository {
    USER
    USERTOKEN
    LOG
}

model Report {
    id                String             @id @default(uuid())
    title             String
    subTitle          String
    content           String
    images            ReportImages[]
    mainImage         String
    publishedBy       User               @relation("Publisher", fields: [publishedByUserId], references: [id], onDelete: SetNull)
    editedBy          User?              @relation("Editor", fields: [editedByUserId], references: [id], onDelete: SetNull)
    publishedByUserId String
    editedByUserId    String
    publishedDate     DateTime
    updatedDate       DateTime
    isHighlight       Boolean
    url               String
    AuthorsOnReports  AuthorsOnReports[]
}

model AuthorsOnReports {
    report   Report @relation(fields: [reportId], references: [id])
    reportId String
    author   User   @relation(fields: [authorId], references: [id])
    authorId String

    @@id([reportId, authorId])
}

model ReportImages {
    id       String  @id @default(uuid())
    Report   Report  @relation(fields: [reportId], references: [id])
    reportId String
    image    String
    isMain   Boolean
}
