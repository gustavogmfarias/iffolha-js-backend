// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "windows", "debian-openssl-1.1.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    USER
    ADMIN
    EDITOR
    AUTHOR
}

model User {
    id                String              @id @default(uuid())
    name              String
    lastName          String
    password          String
    email             String              @unique
    createdAt         DateTime            @default(now())
    avatarUrl         String?
    role              Role                @default(USER)
    userToken         UserToken[]
    Log               Log[]
    Publisher         Article[]           @relation("Publisher")
    Editor            Article[]           @relation("Editor")
    AuthorsOnArticles AuthorsOnArticles[]

    @@map("users")
}

model UserToken {
    id           String   @id @default(uuid())
    token        String
    refreshToken String
    userId       String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt    DateTime @default(now())
    expiresDate  DateTime

    @@map("userTokens")
}

model Log {
    id              String        @id @default(uuid())
    logRepository   LogRepository
    description     String
    createdAt       DateTime      @default(now())
    user            User          @relation(fields: [editedByUserId], references: [id])
    previousContent String        @default("Sem conte√∫do Anterior")
    contentEdited   String
    editedByUserId  String
    modelEditedId   String

    @@map("logs")
}

enum LogRepository {
    TAG
    COURSE
    CLASS
    CATEGORY
    TEXTUALGENRE
    USER
    USERTOKEN
    LOG
    ARTICLE
}

model Article {
    id                     String                   @id @default(uuid())
    title                  String
    subTitle               String
    content                String
    images                 ArticleImages[]
    mainImage              String?
    publishedBy            User                     @relation("Publisher", fields: [publishedByUserId], references: [id], onDelete: SetDefault)
    editedBy               User?                    @relation("Editor", fields: [editedByUserId], references: [id], onDelete: SetNull)
    publishedByUserId      String
    editedByUserId         String?
    publishedDate          DateTime                 @default(now())
    updatedDate            DateTime?                @default(now())
    isHighlight            Boolean                  @default(true)
    url                    String
    AuthorsOnArticles      AuthorsOnArticles[]
    TagsOnArticles         TagsOnArticles[]
    CoursesOnArticles      CoursesOnArticles[]
    ClassOnArticles        ClassOnArticles[]
    CategoryOnArticles     CategoryOnArticles[]
    TextualGenreOnArticles TextualGenreOnArticles[]

    @@map("articles")
}

model AuthorsOnArticles {
    Article   Article @relation(fields: [ArticleId], references: [id], onDelete: Cascade)
    ArticleId String
    author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId  String

    @@id([ArticleId, authorId])
}

model ArticleImages {
    id        String  @id @default(uuid())
    Article   Article @relation(fields: [ArticleId], references: [id], onDelete: Cascade)
    ArticleId String
    image     String
    isMain    Boolean @default(false)
}

model Tag {
    id             String           @id @default(uuid())
    name           String           @unique
    TagsOnArticles TagsOnArticles[]

    @@map("tags")
}

model TagsOnArticles {
    Article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
    articleId String
    tag       Tag     @relation(fields: [tagId], references: [id])
    tagId     String

    @@id([tagId, articleId])
}

model Course {
    id                String              @id @default(uuid())
    name              String              @unique
    schoolLevel       SchoolLevel
    Class             Class[]
    CoursesOnArticles CoursesOnArticles[]

    @@map("courses")
}

enum SchoolLevel {
    SUPERIOR
    TECNICO
    ENSINO_MEDIO
}

model CoursesOnArticles {
    Article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
    articleId String
    course    Course  @relation(fields: [courseId], references: [id])
    courseId  String

    @@id([courseId, articleId])
}

model Class {
    id              String            @id @default(uuid())
    name            String
    course          Course            @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    courseId        String
    ClassOnArticles ClassOnArticles[]

    @@map("classes")
}

model ClassOnArticles {
    Article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    articleId String
    class     Class   @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    classId   String

    @@id([classId, articleId])
}

model Category {
    id   String @id @default(uuid())
    name String @unique

    CategoryOnArticles CategoryOnArticles[]

    @@map("categories")
}

model CategoryOnArticles {
    Article    Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
    articleId  String
    category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    categoryId String

    @@id([categoryId, articleId])
}

model TextualGenre {
    id   String @id @default(uuid())
    name String @unique

    TextualGenreOnArticles TextualGenreOnArticles[]

    @@map("textualgenres")
}

model TextualGenreOnArticles {
    Article        Article      @relation(fields: [articleId], references: [id], onDelete: Cascade)
    articleId      String
    textualGenre   TextualGenre @relation(fields: [textualGenreId], references: [id])
    textualGenreId String

    @@id([textualGenreId, articleId])
}

model Setting {
    id                String        @id @default(uuid())
    title             String
    logo              String?
    favicon           String?
    mainBarColor      String?
    socialMedia       SocialMedia[]
    menuAlertIsActive Boolean       @default(false)
    menuAlert         MenuAlert?    @relation(fields: [menuAlertId], references: [id])
    menuAlertId       String?

    @@map("settings")
}

model SocialMedia {
    id   String @id @default(uuid())
    name String
    url  String
    logo String

    Setting   Setting? @relation(fields: [settingId], references: [id])
    settingId String?
}

model MenuAlert {
    id        String    @id @default(uuid())
    content   String
    color     String
    settingId String?
    Setting   Setting[]
}
